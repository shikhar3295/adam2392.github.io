<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Adam Li - Coding</title><link href="/" rel="alternate"></link><link href="/feeds/coding.atom.xml" rel="self"></link><id>/</id><updated>2018-06-10T00:00:00-04:00</updated><entry><title>Setting Up ERC Standard Tokens</title><link href="/blog/2018/06/setup-erc-token/" rel="alternate"></link><published>2018-06-10T00:00:00-04:00</published><updated>2018-06-10T00:00:00-04:00</updated><author><name>Adam Li</name></author><id>tag:None,2018-06-10:/blog/2018/06/setup-erc-token/</id><summary type="html">&lt;p&gt;A short walkthrough of setting up an ethereum token.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Getting Setup with Ethereum&lt;/h1&gt;
&lt;h1&gt;By: Adam Li&lt;/h1&gt;
&lt;h3&gt;Table of Contents&lt;/h3&gt;
&lt;!-- MarkdownTOC --&gt;

&lt;ul&gt;
&lt;li&gt;Installation&lt;/li&gt;
&lt;li&gt;Set Up&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;Creating Your Project Directory&lt;/li&gt;
&lt;li&gt;1b. Project Directory&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;Contracts and FrontEnd&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Implementation&lt;ul&gt;
&lt;li&gt;ERC Standards&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;ERC20&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;ERC721&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Testing&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;Remix (http://remix.ethereum.org/)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;Ropsten Test Network (https://ropsten.etherscan.io )&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;Javascript Truffle Tests&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;Metamask and Ganache&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deployment&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;truffle.js (http://truffleframework.com/docs/advanced/configuration)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;Crowdsalable Ethereum Token&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;References:&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /MarkdownTOC --&gt;

&lt;p&gt;pragma solidity ^0.4.18;
web3@1.0.0-beta.27
truffle@4.0.4 
solc@0.4.19 
ethereumjs-testrpc@6.0.3 &lt;/p&gt;
&lt;h1&gt;Installation&lt;/h1&gt;
&lt;p&gt;The following packages need to be installed for a test time environment:
&lt;em&gt; testrpc
&lt;/em&gt; web3js
&lt;em&gt; solc
&lt;/em&gt; truffle&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;npm install ethereumjs-testrpc web3
npm install solc
npm install -g truffle
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Testrpc is an in-memory blockchain that can be used to test the development of the application.&lt;/li&gt;
&lt;li&gt;Web3 is essentially the web interface with the backend and frontend.&lt;/li&gt;
&lt;li&gt;Solc is a solidity code compiler&lt;/li&gt;
&lt;li&gt;Truffle is a web framework for building dAPPs using Ethereum&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Set Up&lt;/h1&gt;
&lt;h2&gt;1. Creating Your Project Directory&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir MyToken &amp;amp;&amp;amp; cd MyToken
truffle init
npm init -y
npm install -E zeppelin-solidity
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will install zeppelin-solidity for testing code and initialize your project directory using truffle.s&lt;/p&gt;
&lt;h3&gt;1b. Project Directory&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;contracts: this is your directory for any solidity contracts&lt;/li&gt;
&lt;li&gt;migrations: this is your directory for scriptable deployment files (how do we want to release the functionality of our entire project?)&lt;/li&gt;
&lt;li&gt;test: for testing your entire application&lt;/li&gt;
&lt;li&gt;truffle.js: a configuration file for truffle&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2. Contracts and FrontEnd&lt;/h2&gt;
&lt;p&gt;Next, you need to implement your contracts and frontend to create your unique token(s).&lt;/p&gt;
&lt;h1&gt;Implementation&lt;/h1&gt;
&lt;h2&gt;ERC Standards&lt;/h2&gt;
&lt;h3&gt;1. ERC20&lt;/h3&gt;
&lt;p&gt;Requirements for it are:
- The Token’s Name
- The Token’s Symbol
- The Token’s Decimal Places
- The Number of Tokens in Circulation
- balanceOf 
- allowance
- approve 
- transferFrom&lt;/p&gt;
&lt;p&gt;It also defines two events: Transfer and Approval .&lt;/p&gt;
&lt;h3&gt;2. ERC721&lt;/h3&gt;
&lt;p&gt;These are tokens that are non-fungible. One token does not necessarily equal another. It is slightly more complicated then the erc20 token.&lt;/p&gt;
&lt;p&gt;The standard defines the functions:
- name 
- symbol 
- totalSupply 
- balanceOf 
- ownerOf 
- approve 
- takeOwnership 
- transfer 
- tokenOfOwnerByIndex
- tokenMetadata &lt;/p&gt;
&lt;p&gt;It also defines two events: Transfer and Approval .&lt;/p&gt;
&lt;h1&gt;Testing&lt;/h1&gt;
&lt;h2&gt;1. Remix (http://remix.ethereum.org/)&lt;/h2&gt;
&lt;p&gt;You can test using a web tool (solidity online compiler), hosted by the Ethereum foundation: http://remix.ethereum.org/.&lt;/p&gt;
&lt;p&gt;You can easily test contract functionality, but beware you can't test your whole dapp functionality, so there could be bugs in synchronizing the front/back end with the contracts.&lt;/p&gt;
&lt;h2&gt;2. Ropsten Test Network (https://ropsten.etherscan.io )&lt;/h2&gt;
&lt;p&gt;Using remix, or another tool to deploy your contract, you can check basic outputs here on the test network.&lt;/p&gt;
&lt;h2&gt;3. Javascript Truffle Tests&lt;/h2&gt;
&lt;p&gt;These will be customized test suites that you write in the truffle directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;npm i ethereumjs-tx
truffle develop
truffle(develop)&amp;gt; test
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This command will install the ethereum-tx package, boot a test blockchain using truffle and then run all tests within "/test/" directory.&lt;/p&gt;
&lt;h2&gt;4. Metamask and Ganache&lt;/h2&gt;
&lt;p&gt;This is a blockchain utility web app that can run in your web2.0 browser. It can help debug your entire dapp.&lt;/p&gt;
&lt;p&gt;Ganache is a personal Ethereum development network that runs on your computer.  Using Ganache you can quickly see how your application affects the blockchain, and introspect details like your accounts, balances, contract creations and gas costs. &lt;/p&gt;
&lt;h1&gt;Deployment&lt;/h1&gt;
&lt;h2&gt;1. truffle.js (http://truffleframework.com/docs/advanced/configuration)&lt;/h2&gt;
&lt;p&gt;Inside your truffle.js file, you'll find the line module.exports. You can modify the contents of this json object, to manage your deployment testing.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;networks: Specifies which networks are available for deployment during migrations, as well as specific transaction parameters when interacting with each network (such as gas price, from address, etc.). &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;name: development, test, ropste, live, etc.&lt;/li&gt;
&lt;li&gt;(options): gas, gasPrice, from, provider&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;providers: Specifies the local test network. Make sure you wrap truffle-hdwallet providers in a function closure as shown below to ensure that only one network is ever connected at a time.&lt;/p&gt;
&lt;p&gt;networks: {
  ropsten: {
    provider: function() {
      return new HDWalletProvider(mnemonic, "https://ropsten.infura.io/");
    },
    network_id: '3',
  },
  test: {
    provider: function() {
      return new HDWalletProvider(mnemonic, "http://127.0.0.1:8545/");
    },
    network_id: '*',
  },
}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;contracts_build_directory: for where to build the contracts into byte code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;mocha: configuration options for mochajs testing framework.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can create an ethereum mnemonic and set it, so your providers can see it within the config file. Here is an example of &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;truffle migrate --network ropsten
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;2. Crowdsalable Ethereum Token&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir crowdsalable-eth-token &amp;amp;&amp;amp; cd crowdsalable-eth-token
truffle unbox git@github.com:ajb413/crowdsalable-eth-token.git
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;References:&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;https://medium.com/@ConsenSys/a-101-noob-intro-to-programming-smart-contracts-on-ethereum-695d15c1dab4&lt;/li&gt;
&lt;li&gt;https://medium.com/@mvmurthy/full-stack-hello-world-voting-ethereum-dapp-tutorial-part-1-40d2d0d807c2&lt;/li&gt;
&lt;li&gt;http://truffleframework.com/docs/getting_started/project#exploring-the-project&lt;/li&gt;
&lt;/ol&gt;</content><category term="webdev"></category><category term="ethereum"></category><category term="javascript"></category><category term="blockchain"></category></entry><entry><title>Setting Up a Pelican Site</title><link href="/blog/2017/06/setup-pelican-site/" rel="alternate"></link><published>2017-06-04T00:00:00-04:00</published><updated>2017-06-04T00:00:00-04:00</updated><author><name>Adam Li</name></author><id>tag:None,2017-06-04:/blog/2017/06/setup-pelican-site/</id><summary type="html">&lt;p&gt;A short walkthrough of setting up a pelican site&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Getting Setup with Pelican Site&lt;/h1&gt;
&lt;h1&gt;By: Adam Li&lt;/h1&gt;
&lt;h3&gt;Table of Contents&lt;/h3&gt;
&lt;!-- MarkdownTOC --&gt;

&lt;ul&gt;
&lt;li&gt;Installation&lt;/li&gt;
&lt;li&gt;Choosing Your Hosting Server&lt;/li&gt;
&lt;li&gt;Installing and Choosing Themes/Plugins&lt;/li&gt;
&lt;li&gt;Pushing Content to Cloud&lt;/li&gt;
&lt;li&gt;Adding Pages of Static Content&lt;/li&gt;
&lt;li&gt;Adding Articles To Your Blog&lt;/li&gt;
&lt;li&gt;Adding Gallery / Images To Your Blog&lt;/li&gt;
&lt;li&gt;References:&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /MarkdownTOC --&gt;

&lt;h1&gt;Installation&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;After getting your virtualenv setup, run 'pip install pelican'. Also include additional packages:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;'pip install Markdown beautifulsoup4 typogrify Pillow webassets'&lt;/p&gt;
&lt;p&gt;for helping to write in Markdown and writing pretty text.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Start up pelican&lt;/p&gt;
&lt;p&gt;pelican-quickstart&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;then go through the directions and create your project.&lt;/p&gt;
&lt;h1&gt;Choosing Your Hosting Server&lt;/h1&gt;
&lt;p&gt;There are a couple of options, but you should decide how you want to host your site because then it will be built into your pelican project directory.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Github Pages&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;S3 by Amazon&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Heroku, PythonAnywhere, and More&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Installing and Choosing Themes/Plugins&lt;/h1&gt;
&lt;p&gt;You need to install the pelican themes and the pelican plugins, if you want to use the open source themes and plugins developed.&lt;/p&gt;
&lt;p&gt;Go to these two websites to get your themes/plugins.
https://github.com/getpelican/pelican-themes
https://github.com/getpelican/pelican-plugins&lt;/p&gt;
&lt;p&gt;Afterwards, you can follow those instructions to get a certain theme setup. &lt;/p&gt;
&lt;p&gt;Clone:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/getpelican/pelican-themes.git
git clone https://github.com/getpelican/pelican-plugins
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;PLUGIN_PATHS = [&amp;#39;path/to/pelican-plugins&amp;#39;]
PLUGINS = [&amp;#39;assets&amp;#39;, &amp;#39;sitemap&amp;#39;, &amp;#39;gravatar&amp;#39;]

JINJA_ENVIRONMENT = {&amp;#39;extensions&amp;#39;: [&amp;#39;jinja2.ext.i18n&amp;#39;]}
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Pushing Content to Cloud&lt;/h1&gt;
&lt;p&gt;'pip install ghp-import fabric'&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Using ghp-import:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;First run install by 'pip install ghp-import'&lt;/p&gt;
&lt;p&gt;Then you can run code like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ghp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;commit message&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nb"&gt;all&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Using fab:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;First install fabric by running 'pip install fabric'. Then insert code into your fabfile.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;publishghp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;preview&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#builds publishconf.py&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;git add -A&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#will commit allll files, be careful&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;git commit -m &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ghp-import -m &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39; -b master output&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;git push --all&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and then run &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ fab publishghp:&lt;span class="s2"&gt;&amp;quot;commit message&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to create commits up to the cloud.&lt;/p&gt;
&lt;h1&gt;Adding Pages of Static Content&lt;/h1&gt;
&lt;p&gt;Here you want to add a homepage, about me page and other static pages that are relevant to your site. Create a directory inside /content/pages/ to hold your static pages.&lt;/p&gt;
&lt;h1&gt;Adding Articles To Your Blog&lt;/h1&gt;
&lt;p&gt;To add articles to your blog, create /content/blog/ directory and create subdirectories in there. For example, I have academic, coding, and travel as my subdirectories in my blog. Then adjust your pelicanconf.py file for these blog posts.&lt;/p&gt;
&lt;h1&gt;Adding Gallery / Images To Your Blog&lt;/h1&gt;
&lt;p&gt;https://kwkelly.com/blog/adding-galleries-to-pelican-and-bootstrap/
http://duncanlock.net/blog/2013/05/29/better-figures-images-plugin-for-pelican/&lt;/p&gt;
&lt;h1&gt;References:&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;https://www.notionsandnotes.org/tech/web-development/pelican-static-blog-setup.html&lt;/li&gt;
&lt;li&gt;http://terriyu.info/blog/posts/2013/07/pelican-setup/&lt;/li&gt;
&lt;li&gt;http://beneathdata.com/how-to/how-i-built-this-website/&lt;/li&gt;
&lt;/ol&gt;</content><category term="pelican"></category><category term="publishing"></category><category term="webdev"></category><category term="python"></category></entry><entry><title>Setting Up a Virtual Environment for Python</title><link href="/blog/2017/06/setup-virtual-env/" rel="alternate"></link><published>2017-06-04T00:00:00-04:00</published><updated>2017-06-04T00:00:00-04:00</updated><author><name>Adam Li</name></author><id>tag:None,2017-06-04:/blog/2017/06/setup-virtual-env/</id><summary type="html">&lt;p&gt;A short walkthrough of setting up a virtual environment for Python development.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Getting Setup with Virtual Environment for Python Development&lt;/h1&gt;
&lt;h1&gt;By: Adam Li&lt;/h1&gt;
&lt;h3&gt;Table of Contents&lt;/h3&gt;
&lt;!-- MarkdownTOC autolink="true" bracket="round" --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#installing"&gt;Installing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#basics-create-delete"&gt;Basics (Create, Delete):&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#1-create"&gt;1. Create&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-delete-a-virtualenv"&gt;2. Delete a Virtualenv&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#tips"&gt;Tips&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#1-starting-up-your-venv"&gt;1. Starting up your Venv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-working-on-tvb-with-venv"&gt;2. Working on TVB with Venv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3-requirementstxt"&gt;3. Requirements.txt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#convenient-tools"&gt;Convenient Tools&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#1-automatically-cd-to-project-directory"&gt;1. Automatically cd To Project Directory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2"&gt;2.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#references"&gt;References:&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /MarkdownTOC --&gt;

&lt;p&gt;VirtualEnv: 15.1.0
VirtualEnvWrapper&lt;/p&gt;
&lt;p&gt;A virtual environment is useful for development in Python because it keeps your packages for certain projects separate from each other. It'll keep everything for that project separated in a separate wrapper.&lt;/p&gt;
&lt;h1&gt;Installing&lt;/h1&gt;
&lt;p&gt;For virtualenvironment, follow https://virtualenv.pypa.io/en/stable/installation/&lt;/p&gt;
&lt;p&gt;For virtualenvwrapper, follow http://virtualenvwrapper.readthedocs.io/en/latest/install.html&lt;/p&gt;
&lt;h1&gt;Basics (Create, Delete):&lt;/h1&gt;
&lt;h2&gt;1. Create&lt;/h2&gt;
&lt;p&gt;For Virtualenvwrapper: Run the command &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;#39;mkvirtualenv &amp;lt;envname&amp;gt;&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For Virtualenv: Run command &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virtualenv &amp;#39;./venv/&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;inside your project directory.&lt;/p&gt;
&lt;p&gt;You can also run 'mkvirtualenv -p python3', or 'virtualenv -p python3' to make the virtual environment with a specific python installation (e.g. 2.7, or 3.4).&lt;/p&gt;
&lt;h2&gt;2. Delete a Virtualenv&lt;/h2&gt;
&lt;p&gt;For Virtualenvwrappper: In order to delete a virtual environment, all you need to do is to remove it recursively from your ~/.virtualenvs directory with    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;#39;sudo rm -rf &amp;lt;name&amp;gt;&amp;#39;.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For Virtualenv: Go to the directory of your project and delete the /venv/ directory.&lt;/p&gt;
&lt;h1&gt;Tips&lt;/h1&gt;
&lt;h2&gt;1. Starting up your Venv&lt;/h2&gt;
&lt;p&gt;Startup your virtual environment by typing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;workon name_of_virtualenvironment
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;2. Working on TVB with Venv&lt;/h2&gt;
&lt;p&gt;TBD.&lt;/p&gt;
&lt;h2&gt;3. Requirements.txt&lt;/h2&gt;
&lt;p&gt;This is a convenient file for you to make that keeps track of all your packages. If you ever want to run your project on a new computer, you just create a new virtual environment and run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To create the file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip freeze &amp;gt; requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Convenient Tools&lt;/h1&gt;
&lt;h2&gt;1. Automatically cd To Project Directory&lt;/h2&gt;
&lt;p&gt;Input the following code to your ./virtualenvs/postactivate file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    # subtract strings to get the project name
    function get_project_name() {
        local venv_dir=&lt;span class="nv"&gt;$VIRTUALENVWRAPPER_HOOK_DIR&lt;/span&gt;
        local venv=&lt;span class="nv"&gt;$VIRTUAL_ENV&lt;/span&gt;

        temp_project_name=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;venv&lt;/span&gt;&lt;span class="c1"&gt;#&amp;quot;$venv_dir&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;   # get difference between two strings
        project_name=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;temp_project_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;     # remove leading &amp;#39;/&amp;#39; character

        echo &lt;span class="nv"&gt;$project_name&lt;/span&gt;
        ## uncomment for debugging
        # echo &lt;span class="nv"&gt;$venv_dir&lt;/span&gt;
        # echo &lt;span class="nv"&gt;$venv&lt;/span&gt;
        # echo &lt;span class="nv"&gt;$temp_project_name&lt;/span&gt;
        # echo &lt;span class="nv"&gt;$project_name&lt;/span&gt;
    }

    # export proj=&amp;quot;cd ~/Documents/$(get_project_name)&amp;quot;
    root_dir=&amp;#39;/Users/adam2392/Documents/&amp;#39;
    project_dir=$(get_project_name)
    cd &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;root_dir&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;project_dir&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Make sure you change 'root_dir' to the correct root directory of your projects. &lt;/p&gt;
&lt;p&gt;This assumes that your project directory files are all correspondingly named with your virtualenv. This is convenient for changing directory into your project directory automatically.&lt;/p&gt;
&lt;h2&gt;2.&lt;/h2&gt;
&lt;h1&gt;References:&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;https://nolar.info/automatically-activate-virtualenv-on-cd/&lt;/li&gt;
&lt;li&gt;code to input into .bashrc&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="virtualenv"></category><category term="webdev"></category><category term="python"></category></entry></feed>